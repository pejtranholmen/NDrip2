#include "Meteorological_Data_Functions.h"
#include "../../ModelTypes/FunctFactory.h"
#include "../SOIL/SoilModel.h"
#include "../PLANT/PlantModel.h"
#include "../SOIL/Soil_HeatF.h"
#include "../Structure/StructureModel.h"
#include "../../NewBase/ModelBase.h"






Meteorological_Data_Functions::Meteorological_Data_Functions(void)
{
	 MISSRNT=false;
}
Meteorological_Data_Functions::~Meteorological_Data_Functions(void)
{
}

bool Meteorological_Data_Functions::Def()
{

	ModuleNo=7;
	ModuleConditions="";
	SoilModel* pSoil=(SoilModel*)m_pModelInfo->GetModelPtr("Soil Model");
	p_Soil_WaterF=&pSoil->m_SoilFrost;
	p_Soil_HeatF=&pSoil->m_HeatPump;

	PlantModel* pPlant=(PlantModel*)m_pModelInfo->GetModelPtr("Plant Model");
	p_Plant=&pPlant->m_WaterUptake;

	StructureModel *pStructureModel=(StructureModel*)m_pModelInfo->GetModelPtr("Structure Model");
	p_AdditionalVar=&pStructureModel->m_Additional;


	Sw* pSw;
	pSw= new Sw(&PrecInput ,ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
 
  	Define(pSw,  "PrecInput",0,"Generated by parameters|Read from PG-file (first position)|Read from PG-file (fixed position)","WaterEq >0",200) ;
	pSw= new Sw(&TAirInput  , ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "TempAirInput",0,"Generated by parameters|Read from PG-file (first position)|Read from PG-file (fixed position)","",200);
	pSw= new Sw(&TairCycle  , ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "TempAirCycle",0,"Diurnal|Annual","TempCycleInput >0");
	pSw= new Sw(&HumRelInput, ATMBOUNDARY,  VAPOUR, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "HumRelInput",0,"Generated by parameters|Read from PG-file (first position)|Read from PG-file (fixed position)","RadiationInput > 0|VapourAirInput<1|WaterEq >0",200);
	pSw= new Sw(&VapourAirInput, ATMBOUNDARY,  VAPOUR, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "VapourAirInput",1,"As relative humidity|Read as pressure(first position)|Read as wet bulb (first position)|Read as pressure(fixed position)|Read as wet bulb (fixed position)|vapour pressure deficit (first position)",
	"WaterEq >0|RadiationInput > 0",200);
	pSw= new Sw(&WSpeedInput, ATMBOUNDARY,  ATMOSPHERE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "WSpeedInput",1,"Generated by parameters|Read from PG-file (first position)|Read from PG-file (fixed position)","WaterEq >0|RadiationInput > 0",200);
	pSw= new Sw(&RadNetInput, ATMBOUNDARY,  RADIATION, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "RadNetInput",0,"Estimated|Read from PG-file (first position)|Read from PG-file (fixed position)","RadiationInput > 0|LongWaveBalance =0|WaterEq > 0",200);

	pSw= new Sw(&RadInLongInput, ATMBOUNDARY,  RADIATION, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "RadInLongInput",0,"Estimated|Read from PG-file (first position)|Read from PG-file (fixed position)","WaterEq >0|RadiationInput > 0|LongWaveBalance >= 1",200);
	pSw= new Sw(&RadGlobInput, ATMBOUNDARY,  RADIATION, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "RadGlobInput",1,"Estimated|Read from PG-file (first position)|Read from PG-file (fixed position)","RadiationInput > 0",200);
	pSw= new Sw(&CloudInput  , ATMBOUNDARY,  RADIATION, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "CloudInput",1,"Generated by parameters|Read from PG-file(first position)|Estimated(sunshine)|Read from PG-file (fixed position)|Estimated(TempDayDiff)","RadiationInput > 0|DBSunInput=0",200);
	pSw= new Sw(&DBSunInput  , ATMBOUNDARY,  RADIATION, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "DBSunInput",0,"Not Used|Read from PG-file (first position)|Read from PG-file (fixed position)","RadiationInput > 0",200);
	pSw= new Sw(&PotTranspInput, ATMBOUNDARY,  ATMOSPHERE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "PotTranspInput",0,"Generated by parameters|Read from PG-file","PlantType = 1|WaterEq > 0|Evaporation > 0",200);
	pSw= new Sw(&TSurfInput  , ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "TempSurfInput",0,"Not used|Read from PG-file","HeatEq > 0",200);
	pSw= new Sw(&TAirGlobRad  , ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "TAirGlobRad",1,"Not used|Used","HeatEq > 0");
	pSw= new Sw(&TempCycleInput  , ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "TempCycleInput",1,"Not used|Used","HeatEq > 0");
//	CALL Swi(Hidden, TAirGlobRad ,"TAirGlobRad",0,"Not used|Used")
//	CALL Swi(Hidden, TempCycleInput ,"TempCycleInput",1,"Not used|Used")
	pSw= new Sw(&CommonRefHeight , ATMBOUNDARY,  ATMOSPHERE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "CommonRefHeight",1,"No|Yes"); //!,"PlantType=0")
//!	Define(pSw, UrbanHeatIsland,"UrbanHeatIsland",0,"No|Yes")
	pSw= new Sw(&SweClimScenarious, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "SweClimScenarious",0,"No|HadAM3_A2|HadAM3_B2|ECHAM4_A2|ECHAM4_B2","HeatEq>0");
	pSw= new Sw(&SweClimRegions, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "SweClimRegions",0,"N-W|N-E|M-W|M-E|S-W|S-E","HeatEq>0|SweClimScenarious>0");
	pSw= new Sw(&ClimIndexFileName, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "Dynamic indexed input file",0,"off|Using Single PG file|Using Multi PG file","TypeOfDrivingFile >= 1");
	pSw= new Sw(&TempDayDiffInput, ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pSw, "TempDayDiffInput",0,"Parameter|Read from PG-File (first position)|Read from PG-File (fixed position)","TypeOfDrivingFile >= 1|CloudInput=4");
	pSw= new Sw(&TrafficInput  , ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
 	Define(pSw, "TrafficInput",0,"off|On","HeatEq > 0");

	Func *pFunc;
	string funcname;
	PLOT_PARAM plotpar;
	plotpar.Num_Of_Curves = 1;
	plotpar.Num_Of_Points = 100;
	plotpar.Num_Of_X = 1;
	plotpar.X_Min = 0;
	plotpar.X_Max = 100;
	plotpar.X_Label = "X";
	plotpar.Y_Label = "Y";
	plotpar.LogXScale = false;
	plotpar.LogYScale = false;
	plotpar.Num_Of_Opt = 1;

	FunctorProp functorprop;
	functorprop.FuncName = MyFunc::PRECCORR; functorprop.Arg = MyArgType::D1;
	funcname = "Precipitation Generator"; functorprop.FunctorInitOption = string::npos;

	Ps* pPs;
	pPs = new Ps(&T_Step, ATMBOUNDARY, TIME, NOFPROC, NOBPROC, DETAILED);
	T_Step =1./m_pModelMap->RunOpt.noofiter;
	Define(pPs, "Time Step", .03125, UNIT_TYPES::TIME_UNIT, "WaterEq >100", 0.1E-9, 1., .125, 1.);

	pPs= new Ps(&TempDayDiff_Fixed  , ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL);

	Define(pPs,"TempDay Difference",10.,UNIT_TYPES::TEMP_UNIT,"WaterEq > 0|TempDayDiffInput=0|CloudInput=4", 0., 100.,10.,30.);

	pPs= new Ps(&PrecA0Corr, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"PrecA0Corr",1.07,"-","WaterEq > 0|PrecInput = 1", 0., 10.,0.8,1.2);
	pPs= new Ps(&PrecA1Corr, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);	
	Define(pPs,"PrecA1Corr",0.08,"-","WaterEq > 0|PrecInput = 1", 0., 5.,0., 0.2);



	vector<Ps*> ps_vec;
	ps_vec.clear(); 

	pFunc = new Func(ATMBOUNDARY, PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	functorprop.FuncName = MyFunc::PREC_GENERATOR; functorprop.Arg = MyArgType::D1;	funcname = "Precipitation Generator";
	plotpar.X_Min = 0;
	plotpar.X_Max = 30;
	plotpar.X_Label = "Time Sequence "; plotpar.X_Label += p_ModelInfo->GetUnitString(UNIT_TYPES::TIME_UNIT, true);
	plotpar.Y_Label = "Precipitation Rate "; plotpar.Y_Label += p_ModelInfo->GetUnitString(UNIT_TYPES::WATERFLOW_UNIT, true);

	pPs= new Ps(&PrecRate, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"PrecRate",20.,UNIT_TYPES::WATERFLOW_UNIT,"WaterEq > 0|PrecInput = 0", 0., 5000., 0., 500.);
	pPs= new Ps(&PrecFreq, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"PrecFreq",7.,"days"  ,"WaterEq > 0|PrecInput = 0",0., 1000., 0., 100.);
	pPs= new Ps(&PrecStartDay, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"PrecStartDay",0.,UNIT_TYPES::WATERFLOW_UNIT,"WaterEq > 0|PrecInput = 0", 0., 50., 0., 50.);

	Define(pFunc, functorprop, funcname, ps_vec, plotpar);


	ps_vec.clear();

	functorprop.FuncName = MyFunc::NO_PARFUNC; functorprop.Arg = MyArgType::D1;	funcname = "Air Temperature Year Function";
	functorprop.PhysFuncName = FUNC_CHOICE::AIRTEMP_YEAR;
	plotpar.Num_Of_Points = 300;
	plotpar.X_Max = 365;
	plotpar.X_Label = "Time Sequence "; plotpar.X_Label += p_ModelInfo->GetUnitString(UNIT_TYPES::TIME_UNIT, true);
	plotpar.Y_Label = "Air Temperature "; plotpar.Y_Label += p_ModelInfo->GetUnitString(UNIT_TYPES::TEMP_UNIT, true);


	pPs= new Ps(&TAirMean, ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs, "TempAirMean", 10.,UNIT_TYPES::TEMP_UNIT,"TempCycleInput > 0", -273.15, 100., -50. , 50.);
	pPs= new Ps(&TAirAmpl, ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"TempAirAmpl", 10.,UNIT_TYPES::TEMP_UNIT,"TempCycleInput > 0", 0., 50., 0., 25.);
	pPs= new Ps(&TAirPhase, ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"TempAirPhase",0.,"days","TempCycleInput > 0", 0., 365., 0., 30.);

	
	pFunc = new Func(ATMBOUNDARY, TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pFunc, functorprop, funcname,  ps_vec, plotpar);
	plotpar.X_Max = 1.;

	pFunc = new Func(ATMBOUNDARY, TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	functorprop.FuncName = MyFunc::NO_PARFUNC; functorprop.Arg = MyArgType::D1;	funcname = "Air Temperature Within Day Function";
	functorprop.PhysFuncName = FUNC_CHOICE::AIRTEMP_DAY;

	Define(pFunc, functorprop, funcname,  ps_vec, plotpar);




	pPs= new Ps(&WSpeedMean, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"WindspeedMean", 2.,"m/s","WSpeedInput = 0", 0.1,30., 0.1, 20. );
	pPs= new Ps(&HumRelMean, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"HumRelMean", 70.,"%","WaterEq > 0|HumRelInput = 0",10., 100., 20., 100.);
	pPs= new Ps(&CloudFMean, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"CloudFMean", .7,"-","CloudInput = 0", 0., 1.);
	
	pPs= new Ps(&RefHeight, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"ReferenceHeight",2.0,"m","CommonRefHeight>0",1., 100., 2., 30.);
	pPs= new Ps(&RefHeightWind, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"ReferenceHeightWind",2.0,"m","CommonRefHeight = 0",1., 100., 2., 30.);
	pPs= new Ps(&RefHeightTemp, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"ReferenceHeightTemp",2.0,"m","CommonRefHeight = 0",1., 100., 2., 30.);

	 ps_vec.clear();
/*	functorprop.FunctorInitOption = CommonRefHeight;
	functorprop.FuncName = MyFunc::AIRTEMP_ALT_CORR;	functorprop.Arg = MyArgType::D1; funcname = "Resistance Air Soil Surface";
	pFunc = new Func(ATMBOUNDARY, TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pFunc, functorprop, funcname, pvec, m_Precv);
	*/



//! -- David 1999-04-25 --
//! -- New parameters for topografic corrections of  temp. --
	ps_vec.clear();
	functorprop.FuncName = MyFunc::AIRTEMP_ALT_CORR;	functorprop.Arg = MyArgType::D1; funcname = "Air Temperature Altitude Function";

	plotpar.X_Max = 25.;
	plotpar.X_Label = "Air Temperature at Station "; plotpar.X_Label += p_ModelInfo->GetUnitString(UNIT_TYPES::TEMP_UNIT, true);
	plotpar.Y_Label = "Corrected Air Temperature "; plotpar.Y_Label += p_ModelInfo->GetUnitString(UNIT_TYPES::TEMP_UNIT, true);

	pPs= new Ps(&AltMetStation, ATMBOUNDARY,  TEMPERATURE, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"AltMetStation",0.,"m","HeatEq > 0",0., 10000.);
	pPs= new Ps(&AltSimPosition, ATMBOUNDARY, TEMPERATURE, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"AltSimPosition",0.,"m","HeatEq > 0",0., 10000.);
	pPs= new Ps(&TairLapseRate, ATMBOUNDARY, TEMPERATURE, NOFPROC, NOBPROC, NORMAL); ps_vec.push_back(pPs);
	Define(pPs,"TairLapseRate",0.0056,"Km-1","HeatEq > 0",0., 0.01);
	
	
	pFunc = new Func(ATMBOUNDARY, TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pFunc, functorprop, funcname, ps_vec, plotpar);

	
	
	
	
	pPs= new Ps(&py, ATMBOUNDARY,  GENERAL, FYS_SHAPE, NOBPROC, NORMAL);
	Define(pPs, "Slope N-S", 0., "m/m","HeatEq  > 0|Timeresolution!=1",-1.,1.);
	pPs= new Ps(&px, ATMBOUNDARY,  GENERAL, FYS_SHAPE, NOBPROC, NORMAL);
	Define(pPs, "Slope E-W", 0., "m/m","HeatEq  > 0|Timeresolution!=1",-1.,1.);
	
	pPs= new Ps(&RadInLong_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"RadinLong_Index", 1.,"-","RadInLongInput=1", 1., 5000.);
	pPs= new Ps(&RadGlob_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"RadGlob_Index", 1.,"-","RadGlobInput=2", 1., 5000.);	
	pPs= new Ps(&Prec_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"Prec_Index", 1.,"-","WaterEq > 0|PrecInput =2", 1., 5000.);	
	pPs= new Ps(&TAir_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"Tair_Index", 1.,"-","HeatEq > 0|TempAirInput=2", 1., 5000.);	
	pPs= new Ps(&HumRel_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"HumidityRH_Index", 1.,"-","WaterEq > 0|HumRelInput = 2", 1., 5000.)	;
	pPs= new Ps(&VapourAir_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"Vapour_Index", 1.,"-","VapourAirInput>2", 1., 5000.);	
	pPs= new Ps(&WSpeed_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"WindSpeed_Index", 1.,"-","WSpeedInput = 2", 1., 5000.);	
	pPs= new Ps(&RNT_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"RadNet_Index", 1.,"-","RadNetInput=2", 1., 5000.);	
	pPs= new Ps(&Cloud_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"Cloud_Index", 1.,"-","CloudInput = 3", 1., 5000.);	
	pPs= new Ps(&DBSun_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"DBSunshine_Index", 1.,"-","DBSunInput = 2.", 1., 5000.);	
	pPs= new Ps(&TempDiff_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs,"TempDiff_Index", 1.,"-","TempDiffInput = 2.", 1., 5000.);//	! Urban Iland Parameters
//!	Define(pPsUrbanSmoothFrac, "UrbanSmoothFrac", 0., "-","HeatEq >0",0.,1.)

	pPs= new Ps(&PrecScaleF, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs, "PrecScale", 1., "-","SweClimScenarious>0",0.,1.);
	pPs= new Ps(&TempAddCoef, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pPs, "TempAddCoef", 0., "-","SweClimScenarious>0",0.,1.);

	pPs= new Ps(&PGFileName_Index, ATMBOUNDARY,  PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
    Define(pPs,"InputFileNameIndex", 1.,"-","Dynamic indexed input file>0|TypeOfDrivingFile >= 1", 1., 990000.);

	F* pF;
	pF = new F(&m_PG_Meteor, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
  //  Define(pF, "Crop data","Crop.bin","TypeOfDrivingFile >= 2");
 
//!  	Define(pF,  FILEPG_ADDSUM,"Output file","BIN",.TRUE.,"TestName","ADDSIM >= 1",20);
  	Define(pF, "Meteorological data","Climate.bin","TypeOfDrivingFile >= 1") ;
//!  	Define(pF,  FileDriv2a,"Crop data","BIN",.TRUE.,"Crop","TypeOfDrivingFile >= 2");
 	pF = new F(&m_PG_HeatPump, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
  	Define(pF,"Heat Pump data","HeatPump.bin","Heat Pump = 2|WaterEq > 0");
 	pF = new F(&m_PG_Salt, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
  	Define(pF,  "Salt concentration","SaltTracer.bin","WaterEq > 0|IrrigConcInput =1");
 	 	pF = new F(&m_PG_LaterWater, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
  	Define(pF, "Lateral Water Inflow","GWInflow.bin","WaterEq > 0|LateralInput=1");
 	pF = new F(&m_PG_Snow, ATMBOUNDARY,  CLIMATE, NOFPROC, NOBPROC, NORMAL);
  	Define(pF,  "Snow depths","Snow","SnowAdjustment > 0|WaterEq > 0");
//!  	Define(pF,  FileDriv10a,"Urban Area Ref Temperature","BIN",.TRUE.,"Urban","UrbanHeatIsland > 0|HeatEq > 0");
//!  	Define(pF,  FileDriv9a,"Abiotic soil data","BIN",.TRUE.,"NDriv","TypeOfNDrivingFile > 0");


  	Ds* pDs;
	pDs = new Ds(&PotTransp, SINGLE,WATER, TRANSPIRATION, NOBPROC, NORMAL);
	Define(pDs,"PotTranspiration",0,UNIT_TYPES::WATERFLOW_UNIT,"PlantType > 0|WaterEq > 0");
	pDs = new Ds(&PotTranspMax, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs	,"PotMaxTranspiration",0.,UNIT_TYPES::WATERFLOW_UNIT,"PlantType > 0|WaterEq > 0");
	pDs = new Ds(&TAirDailyMean, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	
	Define(pDs, "TAirDailyMean",0.,UNIT_TYPES::TEMP_UNIT,"TempCycleInput> 0");

	pDs = new Ds(&TAir, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs,"TemperatureAir",0.,UNIT_TYPES::TEMP_UNIT,"WaterEq >0");
	pDs = new Ds(&PrecMeas, ATMBOUNDARY,PRECIPITATION, NOFPROC, NOBPROC, NORMAL);
	Define(pDs	,"PrecMeasured",0.,UNIT_TYPES::WATERFLOW_UNIT,"WaterEq > 0")	;
	pDs = new Ds(&PrecCorr, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs	,"PrecCorrected",0.,UNIT_TYPES::WATERFLOW_UNIT,"WaterEq > 0") ;
	pDs = new Ds(&HumRel, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs	,"HumidityRelative",0.,"%","RadiationInput > 0|WaterEq > 0");
	pDs = new Ds(&VapourPAir, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs,"VapourPressureAir",0.,"Pa","RadiationInput > 0|WaterEq > 0");
	pDs = new Ds(&VapourPDef, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs,"VapourPressureDef",0.,"Pa","RadiationInput > 0|WaterEq > 0") ;
	pDs = new Ds(&WindSpeed, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs ,"WindSpeed",0., "m/s","RadiationInput > 0|WaterEq > 0");
	pDs = new Ds(&RadNetTot, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs	,"RadiationNetTot",0.,UNIT_TYPES::HEATFLOW_UNIT,"RadiationInput > 0|WaterEq > 0");
	pDs = new Ds(&CloudFrac, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs ,"CloudFrac",0.,"-","RadiationInput > 0");
	pDs = new Ds(&DurBriSun, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs	,"DurBriSunshine",0.,"minutes","RadiationInput > 0|DBSunInput >0") ;
	pDs = new Ds(&RadInShort, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs,"GlobalRadiation",0.,UNIT_TYPES::HEATFLOW_UNIT,"RadiationInput > 0");
	pDs = new Ds(&TempDayDifference, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
    Define(pDs ,"TempDayDifference",0.,UNIT_TYPES::TEMP_UNIT,"RadiationInput > 0|CloudInput=5");
	pDs = new Ds(&TrafficIntensity, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
    Define(pDs,"TrafficIntensity",0.,"#/day","TrafficInput > 0");
//!   David 19/6-97	
	pDs = new Ds(&RadInLong, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs ,"RadiationInLong",0.,UNIT_TYPES::HEATFLOW_UNIT,"RadiationInput > 0|WaterEq > 0||LongWaveBalance >=1");
	pDs = new Ds(&IrrigationRate, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs,"IrrigatationRate",0.,UNIT_TYPES::WATERFLOW_UNIT,"WaterEq > 0|Irrigation > 0");


	D* pD;
	vector<double> initv;
	NE *pNL;
	pNL=m_pModelMap->GetNEPointer("Number of Layers");


	pD = new D(&Wsource,pNL, SIMPROFILE, WATER, WATERSOURCE, NOBPROC, NORMAL);
	initv.assign(p_Soil_WaterF->NL,0.);

	Define(pD,pNL, "Wsource",initv,UNIT_TYPES::WATERFLOW_UNIT,"WaterEq >= 1");
	pDs = new Ds(&SpoolRunOn, ATMBOUNDARY,TEMPERATURE, NOFPROC, NOBPROC, NORMAL);
	Define(pDs,"SPool RunOn",0.,UNIT_TYPES::WATERFLOW_UNIT,"LateralInput >= 1|WaterEq > 0");

	



	

return FunctionDef();
}
bool Meteorological_Data_Functions::FunctionDef() {
	Func *pFunc; 
	string funcname;
	vector<Ps*> ps_vec;

	FunctorProp functorprop;

	pFunc = new Func(ATMBOUNDARY, VAPOUR, NOFPROC, NOBPROC, NORMAL);
	functorprop.FuncName = MyFunc::NO_PARFUNC; functorprop.Arg = MyArgType::D2;	funcname = "Vapour Pressure Air Temperature Function";
	functorprop.PhysFuncName = FUNC_CHOICE::AVP_TEMP_RH; functorprop.FunctorInitOption = string::npos; ps_vec.clear();
	Define(pFunc, functorprop, funcname,  ps_vec);




	return true;
}
bool Meteorological_Data_Functions::OpenSweClimFile() {

	vector<float> XX, YY;
	XX.resize(12); YY.resize(12);
	string LineRead;
	LineRead.resize(200);
	string FileScenario;
	
	string dir;
	/*	auto pMod = static_cast<ModelBase>(m_pModelMap);
	dir = pMod->m_DataBaseDirectory;


	if(SweClimScenarious==1)
		FileScenario = dir + "RCAO_HadAM3-A2.Par";
	else if (SweClimScenarious == 2)
		FileScenario = dir + "RCAO_HadAM3-B2.Par";
	else if (SweClimScenarious == 3)
		FileScenario = dir + "RCAO_ECHAM4-A2.Par";
	else if (SweClimScenarious == 4)
		FileScenario = dir + "RCAO_ECHAM4-B2.Par";
	*/

	ifstream file;
	file.open(FileScenario, ios::in);

	if(!file.is_open()) return false;
	DT_A.resize(12);
	DT_B.resize(12);
	PrecCoef.resize(12);

	file.getline(&LineRead[0], 200);
	size_t n = file.gcount();
	LineRead.resize(n);
	LineRead.resize(200);
	file.getline(&LineRead[0], 200);
	n = file.gcount();
	LineRead.resize(n);
	for (size_t i = 0; i < 6; i++) {

		LineRead.resize(200);
		file.getline(&LineRead[0], 200);
		n = file.gcount();
		LineRead.resize(n);
		XX = FUtil::GetFloatVectorFromString(LineRead, 12);



		//Read(Unit, *) XX
		LineRead.resize(200);
		file.getline(&LineRead[0], 200);
		n = file.gcount();
		LineRead.resize(n);
		YY = FUtil::GetFloatVectorFromString(LineRead, 12);
		//	Read(Unit, *) YY
		if (i - 1 == SweClimRegions) {
			for (size_t ii = 0; ii < 12; ii++) {
				DT_A[ii] = XX[ii];
				DT_B[ii] = YY[ii];
			}
		}
	}
	LineRead.resize(200);
	file.getline(&LineRead[0], 200);
	n = file.gcount();
	LineRead.resize(n);
	LineRead.resize(200);
	file.getline(&LineRead[0], 200);
	n = file.gcount();
	LineRead.resize(n);
   		//Read(Unit, *) 	LineRead
		//Do i=1, 6
	for (size_t i = 0; i < 6; i++) {
		LineRead.resize(200);
		file.getline(&LineRead[0], 200);
		n = file.gcount();
		LineRead.resize(n);
		XX = FUtil::GetFloatVectorFromString(LineRead, 12);
			if (i - 1 == SweClimRegions) {
				for (size_t ii = 0; ii < 12; ii++)
					PrecCoef[ii] = XX[ii];
			}
	}
	return true;
}
double Meteorological_Data_Functions::NewTemp(double temp, double Iday) {
	int index=int(Iday/30.5+1);
	index=max(0,min(index,11));
	return DT_A[index]+temp+TempAddCoef;
 }
double Meteorological_Data_Functions::NewVapourP(double VapourP, double Tair, double Iday) {
	int index=int(Iday/30.5+1);
	index=max(0,min(index,11));
	double Tmean=Tair-DT_A[index]/2-TempAddCoef/2;
	return DT_A[index]*DSVP(Tmean)+VapourP+TempAddCoef*DSVP(Tmean);
}
double Meteorological_Data_Functions::NewPrec(double prec, double Iday) {
	int index=int(Iday/30.5+1);
	index=max(0,min(index,11));
	return PrecCoef[index]*prec*PrecScaleF;
}

