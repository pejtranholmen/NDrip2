#include "NC_Drivings_Functions.h"
#include "../SOIL/SoilModel.h"
#include "../PLANT/PlantModel.h"
#include "../Atmosphere/AtmModel.h"
#include "../SOIL/Soil_HeatPump.h"
#include "../Structure/Structure.h"

NC_Drivings_Functions::NC_Drivings_Functions(void)
{


}
NC_Drivings_Functions::~NC_Drivings_Functions(void)
{
}


bool NC_Drivings_Functions::Def()
{
	ModuleNo=27;
	ModuleConditions="";
	AccNDrivRadInShort = 0;
	
	SoilModel* p_Soil=(SoilModel*)m_pModelInfo->GetModelPtr("Soil Model");
	pSoil=&p_Soil->m_SoilFrost;
	PlantModel* p_Plant=(PlantModel*)m_pModelInfo->GetModelPtr("Plant Model");
	pPlant=&p_Plant->m_WaterUptake;
	AtmModel* p_atm=(AtmModel*)m_pModelInfo->GetModelPtr("Atm Model");
	pAtm=&p_atm->m_Irrigation;
	pHeat=(SimModule*)p_Soil->GetModulePtr("Soil Heat Pump");
	

	Sw* pSw;




 	pSw= new Sw(&SoilTempInput  ,SIMPROFILE,TEMPERATURE  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw    ,"SoilTempInput",0,"Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);
	pSw= new Sw(&SoilInfilInput  ,SOILSURFACE, WATER , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw    ,"SoilInfilInput",0,"Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);
 	pSw= new Sw(&SoilWaterInput,SIMPROFILE, WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw    ,"SoilWaterInput",0,"Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);
	pSw= new Sw(&SoilWaterFlowInput  ,SIMPROFILE, WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw    ,"SoilWaterFlowInput",0,"Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);
	pSw= new Sw(&SoilDrainageInput ,SIMPROFILE, WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw    ,"SoilDrainageInput",0,"Not used|Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);
	pSw= new Sw(&WaterStressInput,PLANT, WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw  ,"WaterStressInput",0,"Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);
	pSw= new Sw(&DeepPercolationInput  ,SOILBOTTOM, WATER , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pSw    ,"DeepPercolationInput",0,"Not used|Generated by parameters|Read from PG-file|Simulated","Nitrogen and Carbon >= 1",109);

	Ps *pPs;
	pPs= new Ps(&SoilTemperature ,ALL_SOIL_LAYERS,TEMPERATURE  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs,   "SoilTemperature", 10.,UNIT_TYPES::TEMP_UNIT,"SoilTempInput = 0|Nitrogen and Carbon > 0", -273.15, 100., -50. , 50.);
	pPs= new Ps(&SoilWaterContent,ALL_SOIL_LAYERS,WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs  , "SoilWaterContent", 10.,"Vol %","SoilWaterInput = 0|Nitrogen and Carbon > 0", 0.1, 100., 1. , 95.);
	pPs= new Ps(&SoilWaterFlow,ALL_SOIL_LAYERS,TEMPERATURE  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs  , "SoilWaterFlow", 2.,UNIT_TYPES::WATERFLOW_UNIT,"SoilWaterFlowInput = 0|Nitrogen and Carbon > 0", 0., 100., 0. , 50.);
	pPs= new Ps(&SoilDrainage,ALL_SOIL_LAYERS,TEMPERATURE  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs  , "SoilDrainage", 2.,UNIT_TYPES::WATERFLOW_UNIT,"SoilDrainageInput = 1|Nitrogen and Carbon > 0", 0., 100., 0. , 50.);
	pPs= new Ps(&SoilInfiltration,SOILSURFACE,WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs  , "SoilInfiltration", 2.,UNIT_TYPES::WATERFLOW_UNIT,"SoilInfilInput = 0|Nitrogen and Carbon > 0", 0., 100., 0. , 50.);
	pPs= new Ps(&PlantWaterStress,PLANT,WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs  , "PlantWaterStress", 0.7,"-","WaterStressInput = 0|Nitrogen and Carbon > 0", 0., 1., 0. , 1.);
	pPs= new Ps(&DeepPercolation,SOILBOTTOM,WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pPs  , "DeepPercolation", 2.0,"-","DeepPercolationInput = 1|Nitrogen and Carbon > 0", -50., 50., 0. , 10.);

	F* pF;
	pF= new F(&m_PG_Abiotic,OTHER,GENERAL  , NOFPROC, FORCING_BIOLOGY, NORMAL);
	Define(pF,   "Abiotic soil data","NDriv.bin","TypeOfNDrivingFile > 0");
	pF = new F(&m_PG_GreenIndex, OTHER, GENERAL, NOFPROC, FORCING_BIOLOGY, NORMAL);
	Define(pF, "Green Index", "GreenIndex.bin", "Green Index Forcing > 0|Nitrogen and Carbon > 0");



//!	Driving variables
	D* pD;
	vector<double> initv;
	initv.assign(pSoil->NL,	0.);
	NE *pNL; pNL=m_pModelMap->GetNEPointer("Number of Layers");
	
	pD= new D(&NDrivTemperature, pNL,SIMPROFILE,  TEMPERATURE, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pD, pNL  ,"NDrivTemperature",initv,UNIT_TYPES::TEMP_UNIT,"Nitrogen and Carbon >= 1");
	pD= new D(&NDrivTheta , pNL,SIMPROFILE,  TEMPERATURE, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pD,pNL   ,"NDrivTheta",initv,"Vol %","Nitrogen and Carbon >= 1");
	pD= new D(&NDrivWaterFlow , pNL,SIMPROFILE,  TEMPERATURE, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pD,pNL   ,"NDrivWaterFlow",initv,UNIT_TYPES::WATERFLOW_UNIT,"Nitrogen and Carbon >= 1");
	pD= new D(&NDrivDrainage , pNL,SIMPROFILE,  TEMPERATURE, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pD,pNL   ,"NDrivDrainage",initv,UNIT_TYPES::WATERFLOW_UNIT,"Nitrogen and Carbon >= 1|WaterDrainageInput>0");
	
	NE *pNumPlants;
	pNumPlants=m_pModelMap->GetNEPointer("Number of Plants");
	initv.assign(pPlant->NumPlants,1.);

	pD= new D(&NDrivWaterStress, pNumPlants,PLANT,WATER, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pD,pNumPlants,"NDrivWaterStress",initv,"-","Nitrogen and Carbon >= 1");
	pD= new D(&NDrivSaltStress, pNumPlants, PLANT,WATER, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pD,pNumPlants   ,"NDrivSaltStress",initv,"-","Nitrogen and Carbon >= 1|Salinity stress>0");

	Ds *pDs;
	pDs= new Ds(&NDrivInfiltration,SOILSURFACE,WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pDs,"NDrivInfiltration", 0.,UNIT_TYPES::WATERFLOW_UNIT,"Nitrogen and Carbon >= 1");
	pDs= new Ds(&NDrivDeepPercolation,SOILBOTTOM,WATER  , NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pDs,  "NDrivDeepPercolation", 0.,UNIT_TYPES::WATERFLOW_UNIT,"Nitrogen and Carbon >= 1|DeepPercolationInput >0");

	pDs = new Ds(&GreenIndexDriver, ALLPLANTS, PLANT_STRESS, NOFPROC, FORCING_BIOLOGY, NORMAL);
		Define(pDs, "GreenIndexChange", 0., "-", "Nitrogen and Carbon >= 1|Green Index Forcing >0");


	

return true;
}
bool NC_Drivings_Functions::CheckEcoDriv3() {
//Subroutine CheckEcoDriv3
	string str;

    
	size_t Imiss;//, I2	! Local Variable
	size_t TempCount, ThetaCount, WaterFCount, DrainageCount, StressCount;

     
	 //(NDrivEcoDat(IVAR))

   Imiss=0;
   TempIpos.ivar=ThetaIpos.ivar=WaterFIpos.ivar=DrainageIpos.ivar=InfiltrationIpos.ivar=StressIpos.ivar=DeepPercIpos.ivar=0;

   TempCount=ThetaCount=WaterFCount=DrainageCount=StressCount=0;
      
   if(!m_PG_Abiotic.ReOpen()) return false;
      
   m_PG_Abiotic.SetEndPoints_ValidValue();
	for(size_t i=0; i<m_PG_Abiotic.GetNumVariables(); i++) {
		 string name=m_PG_Abiotic.GetVarName(i+1);
		string Id=m_PG_Abiotic.GetVarId(i+1);

		 for(size_t ii=0; ii<20;ii++) {
			if(int(name[ii])>=97) {
				name[ii]=char(int(name[ii])-32);
			}
		 }
                
     if(name.find("TEMPERATURE ")>=0||name.find("SOILTEMPERATURE ")>0&&SoilTempInput>0) {
		if(TempIpos.ivar==0) TempIpos.ivar=i;
		if(TempCount<pSoil->NL) 
			TempCount++;
		else 
          Message("Warning - too many temperature variables, extra not used is :");
	 }
     else if(name.find("WATERCONTENT")>=0&&SoilWaterInput>0) {
		if(ThetaIpos.ivar==0) ThetaIpos.ivar=i;
		if(ThetaCount<pSoil->NL) 
			ThetaCount++;
		else
		     Message("Warning - too many water content variables, extra not used is :");
		  
	 }
     else if(name.find("WATERFLOW")>=0&&SoilWaterFlowInput>0) {
		if(WaterFIpos.ivar==0) WaterFIpos.ivar=i;
		if(WaterFCount<pSoil->NL) 
			WaterFCount++;
		else
          Message("Warning - too many water flow variables, extra not used is :");
	}
     else if(name.find("WATERDRAINFLOW")>=0&&SoilDrainageInput>1) {
		if(DrainageIpos.ivar==0) DrainageIpos.ivar=i;
		if(DrainageCount<pSoil->NL) 
			DrainageCount++;
		else
			Message("Warning - too many drainage variables, extra not used is :");
		  
	}

     else if(name.find("SOILINFIL")>=0&&SoilInfilInput>0) {
		if(InfiltrationIpos.ivar==0) 
			InfiltrationIpos.ivar=i;
		else
           Message("Warning - too many infiltration variables, extra not used is :");
		  
	}
	 else if(name.find("REDCTOTAL")>=0&&WaterStressInput>0) {
		if(StressIpos.ivar==0) 
			StressIpos.ivar=i;
		else
          Message("Warning - too many water stress variables, extra not used is :");
		  
	 }
	 else if(name.find("DEEPPERC")>=0&&DeepPercolationInput>0) {
		if(DeepPercIpos.ivar==0) 
			DeepPercIpos.ivar=i;
		else
          Message("Warning - too many deep percolation variables, extra not used is :");
		  
	 }
     else {
          Imiss++;
          Message("Note - Not identified :"+name);
		  

     }
 }
 if(Imiss>0) {
   Message("WARNING! "+FUtil::STD_ItoAscii(Imiss)+" - Driving variable not identified");
   
     if(TempCount!=pSoil->NL&&SoilTempInput>0) {
		 Message("Error - Too few soil temperature variables in file :" +m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }
     if(ThetaCount!=pSoil->NL&&SoilWaterInput>0) {
          Message("Error - Too few soil water variables in file :" +m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }
     if(WaterFCount!=pSoil->NL&&SoilWaterFlowInput>0) {
          Message("Error - Too few water flow variables in file :" +m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }
     if(DrainageCount!=pSoil->NL&&SoilDrainageInput>1) {
          Message("Error Too few drainage variables in file :" +m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }
     if(InfiltrationIpos.ivar==0&&SoilInfilInput>0) {
          Message("Error - Missing infiltration variables in file :"+m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }
	 if(StressIpos.ivar==0&&WaterStressInput>0) {
          Message("Error - Missing water stress variables in file :" +m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }
	 if(DeepPercIpos.ivar==0&&DeepPercolationInput>0) {
          Message("Error - Missing deep percolation variables in file :"+m_PG_Abiotic.GetFileName());
		 m_pModelInfo->Run_Res_Id=false;
	 }


 }


//NumValidInput3=IVAR
return true;
}
//End Subroutine CheckEcoDriv3

void NC_Drivings_Functions::NC_Drivings_Update() {
/*Subroutine NC_Drivings_Update

Use CommonStruc, only	: Temp, Theta, WaterDrainFlow, WaterFlow	! Arrays
Use CommonStruc, only	: SoilInfil, OnlyNC								  
Use WaterUptake, only	: RedWupTotal, Transpiration, RedGrowthSalt	! Scalars
Use Drainage,	only	: DeepPerc									! Scalars
Use Drivings,	only	: RadInShort, TAir, VapourPDef
Integer J*/

if(Extracted) {
	Extracted=false;
	NumAccNDriv=0;
	AccNDrivTemperature.assign(pSoil->NL,0.);	AccNDrivTheta.assign(pSoil->NL,0.);AccNDrivWaterFlow.assign(pSoil->NL,0.);AccNDrivDrainage.assign(pSoil->NL,0.);
	AccNDrivInfiltration	=0;
	AccNDrivWaterStress.assign(pPlant->NumPlants,0.);
	AccNDrivDeepPercolation=0;
	AccNDrivTranspiration.assign(pPlant->NumPlants,0.);
	AccNDrivRadInShort=0;
	AccNDrivTair=0;			;
	AccNDrivSaltStress.assign(pPlant->NumPlants,0.);
}

NumAccNDriv++;

AccNDrivTair+=pAtm->TAir;
if(NumTest(pAtm->RadInShort)) AccNDrivRadInShort+=pAtm->RadInShort;		
if(m_pModelStructure->OnlyNC>0) return;	//! No abiotic variables have been simulated
for(size_t i=0; i<AccNDrivTemperature.size();i++) {
	AccNDrivTemperature[i]+=((Soil_HeatPump*)pHeat)->Temp[i];
	AccNDrivTheta[i]+=pSoil->Theta[i];
	if (AccNDrivTheta[i] > -1. && AccNDrivTheta[i] < 1.E6) {

		int j =0 ;
	}
	else {

		int i = 0;
	}
	AccNDrivWaterFlow[i]+=pSoil->WaterFlow[i];
	AccNDrivDrainage[i]+=pSoil->WaterDrainFlow[i];
}
AccNDrivInfiltration+=pAtm->SoilInfil;

AccNDrivDeepPercolation+=pSoil->DeepPerc;


	for(size_t J=0; J<pPlant->NumPlants; J++) {
		AccNDrivWaterStress[J]+=pPlant->RedWupTotal[J];
		AccNDrivTranspiration[J]+=pPlant->Transpiration[J];// ! Note Transpiration scalar
		if(m_pModelStructure->PlantType>=2) 
			AccNDrivSaltStress[J]+=pPlant->RedGrowthSalt[J];
		else
			AccNDrivSaltStress[J]=1.0;
		
	}
}
//End Subroutine NC_Drivings_Update

