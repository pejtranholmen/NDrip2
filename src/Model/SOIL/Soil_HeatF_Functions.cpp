#include "Soil_HeatF_Functions.h"
#include "../Atmosphere/AtmModel.h"
#include "../SOIL_NC/SoilOrgModel.h"

#include "../Structure/StructureModel.h"
#include "../PLANT/PlantModel.h"

Soil_HeatF_Functions::Soil_HeatF_Functions(void)
{
	m_HeatCablePower=false;
}
Soil_HeatF_Functions::~Soil_HeatF_Functions(void)
{
}
bool Soil_HeatF_Functions::Def()
{
	Thermal::Def();
	ModuleNo=16;
	ModuleConditions="HeatEq > 0";
	AtmModel* pAtm=(AtmModel*)m_pModelInfo->GetModelPtr("Atm Model");
	SoilOrgModel* pSoilOrg=(SoilOrgModel*)m_pModelInfo->GetModelPtr("Soil Org Model");
	StructureModel* pStructure=(StructureModel*)m_pModelInfo->GetModelPtr("Structure Model");
	PlantModel* pPlant = (PlantModel*)m_pModelInfo->GetModelPtr("Plant Model");
	p_Plant = &pPlant->m_WaterUptake;
	p_Struc=&pStructure->m_Structure;
	p_NC_Soil=&pSoilOrg->m_NC_SoilOrg;

	p_Atm=&pAtm->m_Irrigation;
	Sw* pSw;
	pSw= new Sw(&HeatPump, SINGLE, HEAT, EXTRACTION, NOBPROC, NORMAL);
		Define(pSw, "Heat Pump",0,"Not used|Generated by parameters|Read from PG-file","");
 	pSw= new Sw(&HeatSource, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);
		Define(pSw,"Heat Source",0,"Not used|One Source(z)|One Homomogeneous source|Two Sources (z)| Two Homomogeneous sources|Single Layer Source (cable)|Biological (soil respiration)","");
 	pSw= new Sw(&SoilHeatConv, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);
		Define(pSw, "Convection flow",1,"Not accounted for|Accounted for","HeatEq >0|WaterEq > 0");
 	pSw= new Sw(&PrecTemperature, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);	
		Define(pSw, "PrecTemperature",0,"Equal surface temperature|Different air temperature","HeatEq >0|WaterEq > 0");
 	pSw= new Sw(&HeatVapourF, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);
		Define(pSw, "Vapour flow",0,"Not account for |Accounted for","SoilVapour > 0");
  	pSw= new Sw(&InitialHeat , SINGLE, HEAT, INITF, NOBPROC, NORMAL);
		Define(pSw, "Initial Heat Conditions",0,"Uniform temperature|Temp(z)-Table|Temp(z)-Estimated|Heat(z)","Nitrogen and Carbon < 2|StartWithPrevious = 0");
 	pSw= new Sw(&HeatLowerB, SINGLE, HEAT, LOWERBOUNDARY, NOBPROC, NORMAL);	
		Define(pSw,  "Lower Boundary",0,"Temperature cycle|Constant heat flow","HeatEq > 0")	;
	pSw= new Sw(&Analytical_Solution, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);
		Define(pSw,"Analytical Solution",0,"Off|On","HeatEq > 0")	;
	pSw= new Sw(&InsulatedWaterPipe, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);
		Define(pSw,  "Insulated Water Pipe",0,"Off|On Unheated|Timer heated|Demand heated 1|Demand water heated","HeatEq > 0");
  	pSw= new Sw(&WaterPipeBox, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);
		Define(pSw, "Water Pipe Box",0,"No dynamic water pipes|2 dynamic pipes","HeatEq > 0|Insulated Water Pipe>0");
  	pSw= new Sw(&ThCondOutput , SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);   
		Define(pSw, "Thermal Conductivity",0,"Not as output|as Conduction only|as Conduction and vapour","HeatEq > 0");
	
	pSw= new Sw(&SingleCableControl, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);
		Define(pSw, "Cable Control",0, "Time (day no)|Static Temperatures|Dynamic Temperatures","Heat Source=5");
		
	Ps* pPs;
  	pPs= new Ps(&GeothermalF , SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);      
		Define(pPs, "GeothermalFlow", -1.E5,UNIT_TYPES::HEATFLOW_UNIT,"Lower Boundary = 1",-1.E7, -1.E3);
 	pPs= new Ps(&TempDiffPrec_Air, SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);      
		Define(pPs, "TempDiffPrec_Air", -2.,UNIT_TYPES::TEMP_UNIT,"HeatEq > 0|WaterEq > 0",-50., 50.,-30.,30.);
	pPs= new Ps(&SoilInitTemp, SINGLE, HEAT, INITF, NOBPROC, NORMAL);      
		Define(pPs, "SoilInitTempConst", 10.,UNIT_TYPES::TEMP_UNIT,"Initial Heat Conditions = 0|Nitrogen and Carbon < 2|StartWithPrevious =0",-270., 100., -50., 50.);
	pPs= new Ps(&HeatProdCoef_B, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);      
		Define(pPs, "HeatProdCoef_B", 0.0964, UNIT_TYPES::TEMP_UNIT,"Heat Source >0|Heat Source <5",0., 1.);
	pPs= new Ps(&HeatProdCoef_AA, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);      
		Define(pPs, "HeatProdCoef_AA", 3000. , UNIT_TYPES::HEATSOURCE_UNIT,"Heat Source =2",0., 1.e7);
	pPs= new Ps(&HeatProdCoef_AA2, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);      
		Define(pPs, "HeatProdCoef_AA2", 3000. , UNIT_TYPES::HEATSOURCE_UNIT,"Heat Source =2",0., 1.e7);
	pPs= new Ps(&HeatProd_Threshold, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);      
		Define(pPs, "HeatProd_Threshold", 30. ,UNIT_TYPES::TEMP_UNIT,"Heat Source >0|Heat Source <5",0., 200.);
	pPs= new Ps(&HeatSourceRateCoef1, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);      
 		Define(pPs, "Source1 Decay Coef", 0. ,"1/day","Heat Source >0|Heat Source <5",0., 100.);
	pPs= new Ps(&HeatSourceRateCoef2, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);      
 		Define(pPs, "Source2 Decay Coef", 0. ,"1/day","Heat Source >2|Heat Source <5",0., 100. );
	pPs = new Ps(&HeatConversionCoef, SINGLE, HEAT, HEATSOURCE, NOBPROC, NORMAL);
		Define(pPs, "HeatConversionCoef", 40.E3, "J/gC", "Heat Source=6", 0., 1.E5, 10.E3, 55.E3);
 	
 	
    
// 	! Parameters for Single layers source 
 	
	pPs= new Ps(&HeatCableOptValue, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
 	Define(pPs, "HeatCable Power", 0. ,UNIT_TYPES::HEATFLOW_UNIT,"Heat Source =5",0., 10.E6 ) ;
	pPs= new Ps(&StartHCableDay, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
 	Define(pPs, "HeatCable Day Start", 121. ,"#","Heat Source =5",0., 365. );
	pPs= new Ps(&OptHCableDay, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
 	Define(pPs, "HeatCable Day Opt", 260. ,"#","Heat Source =5",0., 365. ); 	
	pPs= new Ps(&EndHCableDay, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
 	Define(pPs, "HeatCable Day Stop", 301. ,"#","Heat Source =5",0., 400. ); 	 	
	pPs= new Ps(&ShapeOnHeatCable, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
 	Define(pPs, "HeatCable Shape Start", 2. ,"#","Heat Source =5",0., 365. );
	pPs= new Ps(&ShapeEndHeatCable, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
    Define(pPs, "HeatCable Shape Stop", 2. ,"#","Heat Source =5",0., 365. ); 	 
	pPs= new Ps(&HeatCableLayer, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
    Define(pPs, "HeatCable Layer", 2. ,"#","Heat Source =5",0., 365. ) ;
	pPs= new Ps(&HeatCableDelay, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);      
    Define(pPs, "HeatCable Year Start", 0. ,"years","Heat Source =5",0., 100. ); 

    
 	// Parameters for Single layers source 
 	pPs= new Ps(&HighTempControl, SINGLE,HEAT, HEATPIPE, NOBPROC, NORMAL);
		Define(pPs, "High Temp Control", 3. ,UNIT_TYPES::TEMP_UNIT,"Heat Source =5",0., 10.);
    pPs= new Ps(&LowTempControl, SINGLE,HEAT, HEATPIPE, NOBPROC, NORMAL);
		Define(pPs, "Low Temp Control", 0. ,UNIT_TYPES::TEMP_UNIT,"Heat Source =5",0., 10. );
    
 	// Parameters for Single layers sink 
 	pPs= new Ps(&HighTempCooling,  SINGLE,HEAT, HEATPIPE, NOBPROC, NORMAL);
		Define(pPs, "High Temp Cooling", 35. ,UNIT_TYPES::TEMP_UNIT,"Heat Source =5",0., 100.);
    pPs= new Ps(&LowTempCooling, SINGLE,HEAT, HEATPIPE, NOBPROC, NORMAL);
		Define(pPs, "Low Temp Cooling", 30. ,UNIT_TYPES::TEMP_UNIT,"Heat Source =5",0., 100. );  
    
 	
 	
 	
 	P* pP;
	NE *pNL; pNL=m_pModelMap->GetNEPointer("Number of Layers");

	pP=m_pModelMap->GetPPointer("mUpper Depth");
		mTab_InitTemp.push_back(pP);mTab_InitHeat.push_back(pP);mTab_HeatSource.push_back(pP);
	pP=m_pModelMap->GetPPointer("mLower Depth");
		mTab_InitTemp.push_back(pP);mTab_InitHeat.push_back(pP);mTab_HeatSource.push_back(pP);

	pP= new P(&HeatProdCoef_A, pNL, SIMPROFILE, HEAT, HEATSOURCE, NOBPROC, DETAILED);      
	vector<double> initv;
	initv.resize(p_Soil_WaterF->NL);
	initv.assign(p_Soil_WaterF->NL,	0.);
 		Define(pP, pNL,"ProdCoef_A",initv, UNIT_TYPES::HEATSOURCE_UNIT,"Heat Source >=1",0., 1.E5);
		mTab_HeatSource.push_back(pP);
	
	pP= new P(&HeatProdCoef_A2, pNL, SIMPROFILE, HEAT, HEATSOURCE, NOBPROC, DETAILED);
		Define(pP, pNL,"ProdCoef_A2",initv, UNIT_TYPES::HEATSOURCE_UNIT,"Heat Source >=3",0., 1.E5);
		mTab_HeatSource.push_back(pP);
	
	Tab *pTab;
	pTab= new Tab(&mTab_HeatSource,  SIMPROFILE, HEAT, HEATSOURCE, NOBPROC, DETAILED);
	Define(pTab,"HeatSourceDistribution",3);


		
	pP= new P(&SoilHeatInitial, pNL, SIMPROFILE, HEAT, INITF, NOBPROC, DETAILED);
		initv.assign(p_Soil_WaterF->NL,	1.E6);
 		Define(pP, pNL,"Heat storage",initv, UNIT_TYPES::HEATSTORE_UNIT, "Initial Heat Conditions=3", 0., 1.E8);
		mTab_InitHeat.push_back(pP);

	pP= new P(&SoilInitTempVar, pNL, SIMPROFILE, HEAT, INITF, NOBPROC, DETAILED);
		initv.assign(p_Soil_WaterF->NL,	10.);
		Define(pP, pNL,"Temperature",initv,UNIT_TYPES::TEMP_UNIT,"Initial Heat Conditions=1",-20.,70.);
 		mTab_InitTemp.push_back(pP);

	
	
	
	pTab= new Tab(&mTab_InitTemp,  SIMPROFILE, TEMPERATURE, INITF, NOBPROC, DETAILED);
	Define(pTab,"InitialTemperatures",3);
	pTab= new Tab(&mTab_InitHeat,  SIMPROFILE, HEAT, INITF, NOBPROC, DETAILED);
	Define(pTab,"InitialHeatStorages",3);
  

 
	X* pX;
	pX= new X(&SoilHeat,pNL,SIMPROFILE, HEAT, STORAGE, NOBPROC, NORMAL); 
	initv.assign(p_Soil_WaterF->NL,1000.);
	Define(pX,pNL , "SoilHeat",initv, UNIT_TYPES::HEATSTORE_UNIT, "");
	
	NE* pNPS, *pNHB;
	pNPS=new NE(&NPS, 20,1,100,1,100);
	Define(pNPS, "Number of Water Pipe segments");


	pNHB=new NE(&NHB,4,1,100,1,100);//		!Element is Table	Heat boxes	
	Define(pNHB,"Num of Heat Boxes");
	pX=new  X(&ColdPipeHeat,pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL); 
	Define(pX,pNPS, "ColdPipeHeat",initv, UNIT_TYPES::HEATSTORE_UNIT, "Insulated Water Pipe>0");
	pX=new  X(&OutPipeHeat,pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL); 

	Define(pX,pNPS, "OutPipeHeat", initv, UNIT_TYPES::HEATSTORE_UNIT, "Insulated Water Pipe>0");
	Xs* pXs;
	pXs=new  Xs(&SewageHeatStore,SINGLE, HEAT, STORAGE, NOBPROC, NORMAL);
	Define(pXs,"SewageHeatStore", 1000., UNIT_TYPES::HEATSTORE_UNIT, "Insulated Water Pipe>0");
	pXs=new  Xs(&SewageWaterStore,SINGLE, WATER, STORAGE, NOBPROC, NORMAL); 
	Define(pXs, "SewageWaterStore", 10.,"mm", "Insulated Water Pipe>0");
	pXs=new  Xs(&TravelDistance,SINGLE, HEAT, STORAGE, NOBPROC, NORMAL); 
	Define(pXs, "TravelDistance", 0.0,"-", "Insulated Water Pipe>0");
	T* pT;
	pT=new T(&ColdPipeFlux,pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL); 
	
	Define(pT, pNPS, "ColdPipeFlux",initv,UNIT_TYPES::HEATFLOW_UNIT,	"Insulated Water Pipe>0");
	pT=new T(&ColdPipeSinkFlux,pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL); 	
	Define(pT,pNPS,  "ColdPipeSinkFlux",initv,UNIT_TYPES::HEATFLOW_UNIT,	"Insulated Water Pipe>0");
	pT=new T(&OutPipeFlux,pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL); 	
	Define(pT,pNPS, "OutPipeFlux",initv,UNIT_TYPES::HEATFLOW_UNIT,	"Insulated Water Pipe>0" );
	pT=new T(&OutPipeSinkFlux, pNPS,WATERPIPE, HEAT, TRANSPORT, NOBPROC, NORMAL); 		
	Define(pT, pNPS, "OutPipeSinkFlux",initv,UNIT_TYPES::HEATFLOW_UNIT,	"Insulated Water Pipe>0");	
	Ts *pTs=new Ts(&SewageSinkFlux ,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL);  	
	Define(pTs ,"SewageSinkFlux", 0.,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0")	;
	pTs=new Ts(&SewageWaterIn  ,SINGLE, WATER, STORAGE, NOBPROC, NORMAL);  	
	
	Define(pTs,"SewageWaterIn" , 0.,UNIT_TYPES::WATERFLOW_UNIT,"Insulated Water Pipe>0");
	pTs=new Ts(&SewageWaterOut  , SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pTs,"SewageWaterOut"  , 0.,UNIT_TYPES::WATERFLOW_UNIT,"Insulated Water Pipe>0");
	pTs=new Ts(&SewageInflow  , SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pTs,"SewageInflow"  , 0.,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0");
	pTs=new Ts(&SewageOutflow  , SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pTs, "Sewageoutflow", 0.,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0");	
	pTs=new Ts(&ColdPipeInFlux  , SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pTs,"ColdPipeInFlux", 0.,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0");
	pTs=new Ts(&OutPipeOutFlux  ,SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pTs,"OutPipeOutFlux"     , 0.,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0");
  	Gs* pGs;
	pGs=new Gs(&SewageTemp, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL);  	
    Define(pGs,"Temp Sewage"  , 10.,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe>0");
	G* pG=new G(&ColdPipeTemp, pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL);  	
    initv.assign(NPS,10.);
	Define(pG,pNPS, "Temp ColdPipe", initv,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe>0");
	
	pG=new G(&OutPipeTemp, pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL);  	
    Define(pG,pNPS,"Temp OutPipe"  ,initv,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe>0");  
	pG=new G(&ThCondV,pNL ,SIMPROFILE, HEAT, TRANSPORT, NOBPROC, NORMAL);  
	initv.assign(p_Soil_WaterF->NL,	0.);
    Define(pG,pNL, "Thermal Conductivity"  , initv,UNIT_TYPES::HEATCOND_UNIT,"Thermal Conductivity>0");
           
	
	pT=new T(&SoilHeatFlow, pNL,SIMPROFILE, HEAT, STORAGE, NOBPROC, NORMAL);  	
	Define(pT,pNL, "SoilHeatFlow", initv,UNIT_TYPES::HEATFLOW_UNIT, "");
	pT=new T(&SoilHeatSink,pNL,SIMPROFILE, HEAT, EXTRACTION, NOBPROC, NORMAL);   	
	Define(pT, pNL,"SoilHeatSink",initv,UNIT_TYPES::HEATFLOW_UNIT,	"HeatEq >= 1");
	pT=new T(&SoilHeatSource, pNL,SIMPROFILE, HEAT, HEATSOURCE, NOBPROC, NORMAL);   	
	Define(pT,pNL, "SoilHeatSource",initv,UNIT_TYPES::HEATFLOW_UNIT,	"Heat Source >0");
  	pTs=new Ts(&SurfHeatFlow,SINGLE, HEAT, UPPERBOUNDARY, NOBPROC, NORMAL);  
  	Define(pTs,"SurfHeatFlow"     , 0.,UNIT_TYPES::HEATFLOW_UNIT,"");
	pTs=new Ts(&TotalGroundSensFlow, SINGLE, HEAT, UPPERBOUNDARY, NOBPROC, NORMAL);   		
  	Define(pTs,"TotalGroundSensFlow" ,0.,UNIT_TYPES::HEATFLOW_UNIT, "Evaporation > 0|SurEbal > 0|WaterEq > 0") ;
	pTs=new Ts(&TotalGroundLatFlow, SINGLE, HEAT, UPPERBOUNDARY, NOBPROC, NORMAL);   	
    Define(pTs,"TotalGroundLatFlow"     , 0.,UNIT_TYPES::HEATFLOW_UNIT, "Evaporation > 0|SurEbal > 0|WaterEq > 0")	;
	
	pGs=new Gs(&TempSoilSurf,  SINGLE, TEMPERATURE, UPPERBOUNDARY, NOBPROC, NORMAL); 	
  	Define(pGs,"TempSoilSurf"  , 10.,UNIT_TYPES::TEMP_UNIT,"");
  
	pG=new G(&Temp,pNL,SIMPROFILE, TEMPERATURE, STORAGE, NOBPROC, NORMAL);  	
  	Define(pG,pNL,"Temperature",initv,UNIT_TYPES::TEMP_UNIT,"");
	pG=new G(&ExactTemperature, pNL,SIMPROFILE, TEMPERATURE, STORAGE, NOBPROC, NORMAL); 	
  	Define(pG,pNL, "ExactTemperature",initv,UNIT_TYPES::TEMP_UNIT,"Analytical Solution >0");

	pG=new G(&ThQual, pNL,SIMPROFILE, HEAT, STORAGE, NOBPROC, NORMAL);  	
	Define(pG,pNL,"ThermalQualilty"    ,initv,"-","");

	initv.assign(NHB,1000.);
	pX=new X(&HeatBoxStorage, pNHB,HEATBOX, HEAT, STORAGE, NOBPROC, NORMAL);  	
	Define(pX, pNHB,"HeatBoxStorage",initv, UNIT_TYPES::HEATSTORE_UNIT, "Insulated Water Pipe>0");
	pT=new T(&HeatBoxBoundaryFlux, pNHB,HEATBOX, HEAT, TRANSPORT, NOBPROC, NORMAL);  	
  	Define(pT ,pNHB, "HeatBoxBoundaryFlux",initv,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0");	
	pT=new T(&HeatBoxHeaterFlux, pNHB,HEATBOX, HEAT, TRANSPORT, NOBPROC, NORMAL);  	
 	initv.assign(NHB,0.);
  	Define(pT,pNHB   ,"HeatBoxHeaterFlux",initv,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>1");	
	pTs=new Ts(&HeatBoxReturnFlow,SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);  	
	Define(pTs,"HeatBox ReturnFlow",0.,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe>0");	
 	initv.assign(NHB,10.);
	pX=new X(&HeatBoxTemp, pNHB,HEATBOX, TEMPERATURE, STORAGE, NOBPROC, NORMAL); 
    Define(pX,pNHB,"HeatBoxTemp"  ,initv,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe>0") ;
	pGs=new Gs(&HeatBoxEnhancer,SINGLE, HEAT, TRANSPORT, NOBPROC, NORMAL);  	
   	Define(pGs,"HeatBoxEnhancer"  , 1.,"-","Insulated Water Pipe>0") ;
  

	pPs=new Ps(&WaterPipeFlux, SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pPs, "Water Pipe Flux", 100. ,"mm/day","Insulated Water Pipe>0",0., 50000. );
 	pPs=new Ps(&WaterPipeFluxFluc, SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pPs, "Pipe Fluctuation", 0. ,"-","Insulated Water Pipe>0",0., 1. );
 	pPs=new Ps(&WaterPipeInTemp, SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL); 
	Define(pPs, "WPipe Input Temp", 5. ,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe>0",0., 10. );
 	pPs=new Ps(&WaterSewageInputAdd, SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pPs, "Water Sewage Add Temp", 4. ,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe>0",0., 30. );
 	pPs=new Ps(&WaterSewageBuffer, SINGLE, WATER, HEATPIPE, NOBPROC, NORMAL);  	
	Define(pPs, "Water Sewage Buffer", 20. ,"mm","Insulated Water Pipe>0",0., 30. ) ;
 	pPs=new Ps(&HeatPipeResistance, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL); 	
	Define(pPs, "Heat Pipe Resistance", 1.E-4 ,"CDay/J","Insulated Water Pipe>0",0., 1.E-3 )	;
 	pPs=new Ps(&HeatSewageResistance, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL); 	
    Define(pPs, "Heat Sewage Resistance", .005 ,"CDay/J","Insulated Water Pipe>0",0., 1.E-2 );
  
  
  	pPs=new Ps(&ThCondInsulator, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL); 	
   	Define(pPs, "ThCond Insulator", 0.04 ,"W/m/K","Insulated Water Pipe>0",0.001, 2. ) ;
  	pPs=new Ps(&HeaterFluxRate, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL); 		
	Define(pPs, "HeaterFluxRate",1.E6 ,UNIT_TYPES::HEATFLOW_UNIT,"Insulated Water Pipe=2",0., 1.E7);
  	pPs=new Ps(&HeaterTempThreshold, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL); 	 	
	Define(pPs, "HeatTempThreshold",-3. ,UNIT_TYPES::TEMP_UNIT,"Insulated Water Pipe=4",-10.,0.); 
   	pPs=new Ps(&HeaterDuration, SINGLE, HEAT, HEATPIPE, NOBPROC, NORMAL); 	
	Define(pPs, "HeaterDuration",1. ,"-","Insulated Water Pipe=2",0.,1.) ;
	pP=new P(&WaterPipeLayer, pNHB,HEATBOX, HEAT, STORAGE, NOBPROC, NORMAL);
	initv.assign(NHB,5.0);
   	Define(pP, pNHB, "Water Pipe BoxLayer",initv, "#","Insulated Water Pipe>0",1., 10.)  ;
	mTab_PipeBox.push_back(pP);
	pP=new P(&PipeSegments, pNPS,WATERPIPE, HEAT, STORAGE, NOBPROC, NORMAL); 
	initv.assign(NPS,1.0);
    Define(pP, pNPS, "Pipe Segment Length",initv,  "m","Insulated Water Pipe>0",0.1,5.);
	mTab_PipeL.push_back(pP);
	pTab= new Tab(&mTab_PipeL,  WATERPIPE, DISTANCE, FYS_SHAPE, NOBPROC, DETAILED);
	Define(pTab, "Water Pipe Segment Sizes", "Pipe Segment Length","Insulated Water Pipe>0");
	pTab= new Tab(&mTab_PipeBox,  HEATBOX, DISTANCE, FYS_SHAPE, NOBPROC, DETAILED);
	Define(pTab,"Water Pipe Box Layers", "Water Pipe BoxLayer","Insulated Water Pipe>0");

	return FunctionDef();
}

bool Soil_HeatF_Functions::FunctionDef() {



	return true;
}
double Soil_HeatF_Functions::RegulatedHeatCableAirTempFunction(double TempSurf,double Tair) {
	double out;
    if(TempSurf<LowTempControl&&!m_HeatCablePower) {  //! Adding Temp(1) LE 0. And.Temp(1).LE.0.  August 13. ?
        out=HeatCableOptValue;
        m_HeatCablePower=true;
	}
    else if(TempSurf>HighTempControl&&m_HeatCablePower) {
        out=0.;
        m_HeatCablePower=false;
	}
	else if(TempSurf>HighTempCooling&&!m_HeatCablePower) {
		out=-HeatCableOptValue;
        m_HeatCablePower=true;
	}
	else if(TempSurf<LowTempCooling&&m_HeatCablePower) {
		out=0.;
        m_HeatCablePower=false;
	}
	else if(m_HeatCablePower&&TempSurf<HighTempControl)
		out=HeatCableOptValue;
	else if(m_HeatCablePower&&TempSurf>LowTempCooling)
		out=-HeatCableOptValue;
	else 
		out=0.;

	return out;
}
double Soil_HeatF_Functions::RegulatedHeatCableDewPointTempFunction(double TempSurf, double VapourPressureAir) {
	double out;
	double DewPoint=TempVapourPressure(VapourPressureAir);
    if(TempSurf<DewPoint&&!m_HeatCablePower&&TempSurf<0) {  //! Adding Temp(1) LE 0. And.Temp(1).LE.0.  August 13. ?
        out=HeatCableOptValue;
        m_HeatCablePower=true;
	}
    else if(TempSurf>DewPoint+1&&m_HeatCablePower) {
        out=0.;
        m_HeatCablePower=false;
	}
	else if(m_HeatCablePower)
		out=HeatCableOptValue;
	else 
		out=0.;

	return out;
}

double Soil_HeatF_Functions::SoilHeatCableFunction() {
   
   double value, aweight;
   if(m_pModelInfo->JDayNum<=StartHCableDay) 
		value=0.;
	else if(m_pModelInfo->JDayNum<OptHCableDay) {
		aweight=pow(sin((m_pModelInfo->JDayNum-StartHCableDay)/(OptHCableDay-StartHCableDay)*Fix::PI/2),ShapeOnHeatCable);
		value=aweight*HeatCableOptValue;
	}
	else if(m_pModelInfo->JDayNum<=EndHCableDay) {
		aweight=pow(sin((m_pModelInfo->JDayNum-OptHCableDay)/(EndHCableDay-OptHCableDay)*Fix::PI/2),ShapeEndHeatCable);
		value=HeatCableOptValue*(1-aweight);
	}
	else
		value=0.;

	return value;
}

double Soil_HeatF_Functions::HeatSourceAgeingFunction(double Days, double DecayCoef) {
	return exp(-DecayCoef*Days);
}
double Soil_HeatF_Functions::HeatSourceAgeingFunctionL(size_t index) {

    double DecayCoef, Days;
    
    if(index==1)
        DecayCoef=HeatSourceRateCoef1;
    else
        DecayCoef=HeatSourceRateCoef2;   
    
    Days=m_pModelInfo->T_Current-AgeofSourceAtStart;

    return HeatSourceAgeingFunction(DecayCoef, Days);
}
double Soil_HeatF_Functions::SoilHeatSourceFunc(double Temp) {
	double xx;
	if(Temp<HeatProd_Threshold) 
		xx=Temp;
	else
		xx=HeatProd_Threshold;
	return exp(HeatProdCoef_B*(xx));
}
double Soil_HeatF_Functions::SoilHeatSourceFuncL2(size_t index, double Temp) {
		double value=0.1;
	if(HeatSource==1||HeatSource==3) 
		value=HeatProdCoef_A2[index]*p_NC_Soil->f_CommonTempResponse(Temp)*p_Soil_WaterF->AThicknessLayers[index];
	else if(HeatSource==2) 
		value=HeatProdCoef_AA2*p_NC_Soil->f_CommonTempResponse(Temp)*p_Soil_WaterF->AThicknessLayers[index];
	

	return exp(-HeatSourceRateCoef2*(m_pModelInfo->T_Current-AgeofSourceAtStart))*value;

}
double Soil_HeatF_Functions::SoilHeatSourceFuncL(size_t index, double Temp) {
	double value=0.1;

	if(HeatSource==1||HeatSource==3)
		value=HeatProdCoef_A[index]*SoilHeatSourceFunc(Temp)*p_Soil_WaterF->AThicknessLayers[index];
	else if(HeatSource==2) 
		value=HeatProdCoef_AA*SoilHeatSourceFunc(Temp)*p_Soil_WaterF->AThicknessLayers[index];
	
	return exp(-HeatSourceRateCoef1*(m_pModelInfo->T_Current-AgeofSourceAtStart))*value;
}
double Soil_HeatF_Functions::SurfaceVapourFlow(double TempSurf) {
	double ConSurf=Conc_Vap(p_Atm->VapourPSurf, TempSurf); //	!C Concentratin of vapour at soil surface
	double VPSS=ModelFunctions::SVP(Temp.front());				
	double VPS1=VPSS*RHPsi(p_Soil_WaterF->Psi.front(), Temp.front(),1.);  //! 1. by DG 27/7 !C Concentratin of vapour at mid point in uppermost soil layer
	double ConcSurf1=Conc_Vap(VPS1, Temp.front());
	double AirP=(p_Soil_WaterF->M_Saturation.front()-p_Soil_WaterF->Theta.front())/100.;	//!C Air fraction of uppermost layer
	double DATMU=D_vap(p_Soil_WaterF->DVapTortuosity, AirP, Temp.front());//	!C Diffusion coefficient
	double VAPGRA=(ConcSurf1-ConSurf)/(p_Soil_WaterF->ThicknessLayers.front()/2.);//	!C Concentration gradien
	return -86.400*DATMU*VAPGRA; 
}
